# NOTE: this definition file depends on features only available in
# Singularity 3.2 and later.
BootStrap: docker
From: docker.io/nvidia/cuda@sha256:13381961419ea62f4417059d5e196f39f5f4965c22adae753c5eb3b53b417995
Stage: devel
%post
    . /.singularity.d/env/10-docker*.sh

# step1: start

# Install build tools over base image

# Python
%post
    apt-get update -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        python3
    rm -rf /var/lib/apt/lists/*

%post
    apt-get update -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        python3-pip \
        python3-setuptools \
        python3-venv \
        python3-wheel
    rm -rf /var/lib/apt/lists/*

# CMake version 3.31.4
%post
    apt-get update -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        make \
        wget
    rm -rf /var/lib/apt/lists/*
%post
    cd /
    mkdir -p /var/tmp && wget -q -nc --no-check-certificate -P /var/tmp https://github.com/Kitware/CMake/releases/download/v3.31.4/cmake-3.31.4-linux-aarch64.sh
    mkdir -p /usr/local
    /bin/sh /var/tmp/cmake-3.31.4-linux-aarch64.sh --prefix=/usr/local --skip-license
    rm -rf /var/tmp/cmake-3.31.4-linux-aarch64.sh
%environment
    export PATH=/usr/local/bin:$PATH
%post
    export PATH=/usr/local/bin:$PATH

# Git, Pkgconf

%post
    apt-get update -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        git \
        pkgconf
    rm -rf /var/lib/apt/lists/*

# step2: start

# Install network stack packages and OpenMPI

# Mellanox OFED version 24.04-0.7.0.0
%post
    apt-get update -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        ca-certificates \
        gnupg \
        wget
    rm -rf /var/lib/apt/lists/*
%post
    wget -qO - https://www.mellanox.com/downloads/ofed/RPM-GPG-KEY-Mellanox | apt-key add -
    mkdir -p /etc/apt/sources.list.d && wget -q -nc --no-check-certificate -P /etc/apt/sources.list.d https://linux.mellanox.com/public/repo/mlnx_ofed/24.04-0.7.0.0/ubuntu22.04/mellanox_mlnx_ofed.list
    apt-get update -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        ibverbs-providers \
        ibverbs-utils \
        libibmad-dev \
        libibmad5 \
        libibumad-dev \
        libibumad3 \
        libibverbs-dev \
        libibverbs1 \
        librdmacm-dev \
        librdmacm1
    rm -rf /var/lib/apt/lists/*

# XPMEM branch master
%post
    apt-get update -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        autoconf \
        automake \
        ca-certificates \
        file \
        git \
        libtool \
        make
    rm -rf /var/lib/apt/lists/*
%post
    cd /
    mkdir -p /var/tmp && cd /var/tmp && git clone --depth=1 --branch master https://github.com/hjelmn/xpmem.git xpmem && cd -
    cd /var/tmp/xpmem
    autoreconf --install
    cd /var/tmp/xpmem &&   ./configure --prefix=/usr/local/xpmem --disable-kernel-module
    make -j$(nproc)
    make -j$(nproc) install
    rm -rf /var/tmp/xpmem
%environment
    export CPATH=/usr/local/xpmem/include:$CPATH
    export LD_LIBRARY_PATH=/usr/local/xpmem/lib:$LD_LIBRARY_PATH
    export LIBRARY_PATH=/usr/local/xpmem/lib:$LIBRARY_PATH
%post
    export CPATH=/usr/local/xpmem/include:$CPATH
    export LD_LIBRARY_PATH=/usr/local/xpmem/lib:$LD_LIBRARY_PATH
    export LIBRARY_PATH=/usr/local/xpmem/lib:$LIBRARY_PATH

# GDRCOPY version 2.2
%post
    apt-get update -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        make \
        wget
    rm -rf /var/lib/apt/lists/*
%post
    cd /
    mkdir -p /var/tmp && wget -q -nc --no-check-certificate -P /var/tmp https://github.com/NVIDIA/gdrcopy/archive/v2.2.tar.gz
    mkdir -p /var/tmp && tar -x -f /var/tmp/v2.2.tar.gz -C /var/tmp -z
    cd /var/tmp/gdrcopy-2.2
    mkdir -p /usr/local/gdrcopy/include /usr/local/gdrcopy/lib
    make prefix=/usr/local/gdrcopy lib lib_install
    rm -rf /var/tmp/gdrcopy-2.2 /var/tmp/v2.2.tar.gz
%environment
    export CPATH=/usr/local/gdrcopy/include:$CPATH
    export LD_LIBRARY_PATH=/usr/local/gdrcopy/lib:$LD_LIBRARY_PATH
    export LIBRARY_PATH=/usr/local/gdrcopy/lib:$LIBRARY_PATH
%post
    export CPATH=/usr/local/gdrcopy/include:$CPATH
    export LD_LIBRARY_PATH=/usr/local/gdrcopy/lib:$LD_LIBRARY_PATH
    export LIBRARY_PATH=/usr/local/gdrcopy/lib:$LIBRARY_PATH

# UCX https://github.com/openucx/ucx.git v1.18.0
%post
    apt-get update -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        autoconf \
        automake \
        binutils-dev \
        ca-certificates \
        file \
        git \
        libnuma-dev \
        libtool \
        make \
        wget
    rm -rf /var/lib/apt/lists/*
%post
    cd /
    mkdir -p /var/tmp && cd /var/tmp && git clone --depth=1 --branch v1.18.0 https://github.com/openucx/ucx.git ucx && cd -
    cd /var/tmp/ucx
    ./autogen.sh
    cd /var/tmp/ucx &&   ./configure --prefix=/usr/local/ucx --disable-assertions --disable-debug --disable-doxygen-doc --disable-logging --disable-params-check --enable-mt --enable-optimizations --with-cuda=/usr/local/cuda --with-gdrcopy=/usr/local/gdrcopy --with-rdmacm --with-verbs --with-xpmem=/usr/local/xpmem --without-knem
    make -j$(nproc)
    make -j$(nproc) install
    rm -rf /var/tmp/ucx
%environment
    export CPATH=/usr/local/ucx/include:$CPATH
    export LD_LIBRARY_PATH=/usr/local/ucx/lib:$LD_LIBRARY_PATH
    export LIBRARY_PATH=/usr/local/ucx/lib:$LIBRARY_PATH
    export PATH=/usr/local/ucx/bin:$PATH
%post
    export CPATH=/usr/local/ucx/include:$CPATH
    export LD_LIBRARY_PATH=/usr/local/ucx/lib:$LD_LIBRARY_PATH
    export LIBRARY_PATH=/usr/local/ucx/lib:$LIBRARY_PATH
    export PATH=/usr/local/ucx/bin:$PATH

# OpenMPI version 5.0.3
%post
    apt-get update -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        bzip2 \
        file \
        hwloc \
        libnuma-dev \
        make \
        openssh-client \
        perl \
        tar \
        wget
    rm -rf /var/lib/apt/lists/*
%post
    cd /
    mkdir -p /var/tmp && wget -q -nc --no-check-certificate -P /var/tmp https://www.open-mpi.org/software/ompi/v5.0/downloads/openmpi-5.0.3.tar.bz2
    mkdir -p /var/tmp && tar -x -f /var/tmp/openmpi-5.0.3.tar.bz2 -C /var/tmp -j
    cd /var/tmp/openmpi-5.0.3 &&   ./configure --prefix=/usr/local/openmpi --disable-getpwuid --enable-orterun-prefix-by-default --with-cuda --with-pmix=internal --with-ucx=/usr/local/ucx --with-verbs
    make -j$(nproc)
    make -j$(nproc) install
    rm -rf /var/tmp/openmpi-5.0.3 /var/tmp/openmpi-5.0.3.tar.bz2
%environment
    export LD_LIBRARY_PATH=/usr/local/openmpi/lib:$LD_LIBRARY_PATH
    export PATH=/usr/local/openmpi/bin:$PATH
%post
    export LD_LIBRARY_PATH=/usr/local/openmpi/lib:$LD_LIBRARY_PATH
    export PATH=/usr/local/openmpi/bin:$PATH

# step3: start

# Compile and install OpenMPI benchmarks

# https://github.com/amasini0/mpi-benchmarks.git
%post
    cd /
    mkdir -p /var/tmp && cd /var/tmp && git clone --depth=1 https://github.com/amasini0/mpi-benchmarks.git mpi-benchmarks && cd -
    mkdir -p /var/tmp/mpi-benchmarks/build && cd /var/tmp/mpi-benchmarks/build && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/benchmarks -DCMAKE_BUILD_TYPE=Release /var/tmp/mpi-benchmarks
    cmake --build /var/tmp/mpi-benchmarks/build --target all -- -j$(nproc)
    cmake --build /var/tmp/mpi-benchmarks/build --target install -- -j$(nproc)
    rm -rf /var/tmp/mpi-benchmarks
%environment
    export LD_LIBRARY_PATH=/usr/local/benchmarks/lib:$LD_LIBRARY_PATH
    export LIBRARY_PATH=/usr/local/benchmarks/lib:$LIBRARY_PATH
    export PATH=/usr/local/benchmarks/bin:$PATH
%post
    export LD_LIBRARY_PATH=/usr/local/benchmarks/lib:$LD_LIBRARY_PATH
    export LIBRARY_PATH=/usr/local/benchmarks/lib:$LIBRARY_PATH
    export PATH=/usr/local/benchmarks/bin:$PATH

# step4: start

# Generate runtime image

BootStrap: docker
From: docker.io/nvidia/cuda@sha256:fd99be9b4b86c542a463709fadc32737c0bbfb9d49180a6bf64dc0471c655390
%post
    . /.singularity.d/env/10-docker*.sh

# Python
%post
    apt-get update -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        python3
    rm -rf /var/lib/apt/lists/*

# Mellanox OFED version 24.04-0.7.0.0
%post
    apt-get update -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        ca-certificates \
        gnupg \
        wget
    rm -rf /var/lib/apt/lists/*
%post
    wget -qO - https://www.mellanox.com/downloads/ofed/RPM-GPG-KEY-Mellanox | apt-key add -
    mkdir -p /etc/apt/sources.list.d && wget -q -nc --no-check-certificate -P /etc/apt/sources.list.d https://linux.mellanox.com/public/repo/mlnx_ofed/24.04-0.7.0.0/ubuntu22.04/mellanox_mlnx_ofed.list
    apt-get update -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        ibverbs-providers \
        ibverbs-utils \
        libibmad-dev \
        libibmad5 \
        libibumad-dev \
        libibumad3 \
        libibverbs-dev \
        libibverbs1 \
        librdmacm-dev \
        librdmacm1
    rm -rf /var/lib/apt/lists/*

# XPMEM
%files from devel
    /usr/local/xpmem /usr/local/xpmem
%environment
    export CPATH=/usr/local/xpmem/include:$CPATH
    export LD_LIBRARY_PATH=/usr/local/xpmem/lib:$LD_LIBRARY_PATH
    export LIBRARY_PATH=/usr/local/xpmem/lib:$LIBRARY_PATH
%post
    export CPATH=/usr/local/xpmem/include:$CPATH
    export LD_LIBRARY_PATH=/usr/local/xpmem/lib:$LD_LIBRARY_PATH
    export LIBRARY_PATH=/usr/local/xpmem/lib:$LIBRARY_PATH

# GDRCOPY
%files from devel
    /usr/local/gdrcopy /usr/local/gdrcopy
%environment
    export CPATH=/usr/local/gdrcopy/include:$CPATH
    export LD_LIBRARY_PATH=/usr/local/gdrcopy/lib:$LD_LIBRARY_PATH
    export LIBRARY_PATH=/usr/local/gdrcopy/lib:$LIBRARY_PATH
%post
    export CPATH=/usr/local/gdrcopy/include:$CPATH
    export LD_LIBRARY_PATH=/usr/local/gdrcopy/lib:$LD_LIBRARY_PATH
    export LIBRARY_PATH=/usr/local/gdrcopy/lib:$LIBRARY_PATH

# UCX
%post
    apt-get update -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        libbinutils
    rm -rf /var/lib/apt/lists/*
%files from devel
    /usr/local/ucx /usr/local/ucx
%environment
    export CPATH=/usr/local/ucx/include:$CPATH
    export LD_LIBRARY_PATH=/usr/local/ucx/lib:$LD_LIBRARY_PATH
    export LIBRARY_PATH=/usr/local/ucx/lib:$LIBRARY_PATH
    export PATH=/usr/local/ucx/bin:$PATH
%post
    export CPATH=/usr/local/ucx/include:$CPATH
    export LD_LIBRARY_PATH=/usr/local/ucx/lib:$LD_LIBRARY_PATH
    export LIBRARY_PATH=/usr/local/ucx/lib:$LIBRARY_PATH
    export PATH=/usr/local/ucx/bin:$PATH

# OpenMPI
%post
    apt-get update -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        hwloc \
        openssh-client
    rm -rf /var/lib/apt/lists/*
%files from devel
    /usr/local/openmpi /usr/local/openmpi
%environment
    export LD_LIBRARY_PATH=/usr/local/openmpi/lib:$LD_LIBRARY_PATH
    export PATH=/usr/local/openmpi/bin:$PATH
%post
    export LD_LIBRARY_PATH=/usr/local/openmpi/lib:$LD_LIBRARY_PATH
    export PATH=/usr/local/openmpi/bin:$PATH

# https://github.com/amasini0/mpi-benchmarks.git
%files from devel
    /usr/local/benchmarks /usr/local/benchmarks
%environment
    export LD_LIBRARY_PATH=/usr/local/benchmarks/lib:$LD_LIBRARY_PATH
    export LIBRARY_PATH=/usr/local/benchmarks/lib:$LIBRARY_PATH
    export PATH=/usr/local/benchmarks/bin:$PATH
%post
    export LD_LIBRARY_PATH=/usr/local/benchmarks/lib:$LD_LIBRARY_PATH
    export LIBRARY_PATH=/usr/local/benchmarks/lib:$LIBRARY_PATH
    export PATH=/usr/local/benchmarks/bin:$PATH

# Libraries missing from CUDA runtime image

%post
    apt-get update -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        libnuma1
    rm -rf /var/lib/apt/lists/*
